// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;

    public struct _dbac35785ed561c428f6925098e216fa_3788241317174555150 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Single airStolen;
            [FieldOffset(4)]
            public System.Single remainingTime;
            [FieldOffset(8)]
            public System.Byte inGame;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _dbac35785ed561c428f6925098e216fa_3788241317174555150.airStolenMask;
            airStolenSimulationFrame = frame;
            FieldsMask |= _dbac35785ed561c428f6925098e216fa_3788241317174555150.remainingTimeMask;
            remainingTimeSimulationFrame = frame;
            FieldsMask |= _dbac35785ed561c428f6925098e216fa_3788241317174555150.inGameMask;
            inGameSimulationFrame = frame;
        }

        public static unsafe _dbac35785ed561c428f6925098e216fa_3788241317174555150 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 9) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 9) " +
                    "for component with ID 156");
            }

            if (simFramesCount != 2) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 2) " +
                    "for component with ID 156");
            }

            var orig = new _dbac35785ed561c428f6925098e216fa_3788241317174555150();

            var comp = (Interop*)data;

            orig.airStolen = comp->airStolen;
            orig.airStolenSimulationFrame = simFrames[0].Into();
            orig.remainingTime = comp->remainingTime;
            orig.remainingTimeSimulationFrame = simFrames[1].Into();
            orig.inGame = comp->inGame != 0;

            return orig;
        }


        public static uint airStolenMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame airStolenSimulationFrame;
        public System.Single airStolen;
        public static uint remainingTimeMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame remainingTimeSimulationFrame;
        public System.Single remainingTime;
        public static uint inGameMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame inGameSimulationFrame;
        public System.Boolean inGame;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 156;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000000111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;

        private long[] simulationFrames;

        public long[] GetSimulationFrames() {
            if (simulationFrames == null)
            {
                simulationFrames = new long[2];
            }

            simulationFrames[0] = airStolenSimulationFrame;
            simulationFrames[1] = remainingTimeSimulationFrame;

            return simulationFrames;
        }

        public int GetFieldCount() => 3;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;


        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;

            if ((FieldsMask & _dbac35785ed561c428f6925098e216fa_3788241317174555150.airStolenMask) != 0 && (min == null || this.airStolenSimulationFrame < min))
            {
                min = this.airStolenSimulationFrame;
            }
            if ((FieldsMask & _dbac35785ed561c428f6925098e216fa_3788241317174555150.remainingTimeMask) != 0 && (min == null || this.remainingTimeSimulationFrame < min))
            {
                min = this.remainingTimeSimulationFrame;
            }

            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_dbac35785ed561c428f6925098e216fa_3788241317174555150)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.airStolenSimulationFrame = other.airStolenSimulationFrame;
                this.airStolen = other.airStolen;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.remainingTimeSimulationFrame = other.remainingTimeSimulationFrame;
                this.remainingTime = other.remainingTime;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.inGameSimulationFrame = other.inGameSimulationFrame;
                this.inGame = other.inGame;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_dbac35785ed561c428f6925098e216fa_3788241317174555150 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 3);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                if (isRefSimFrameValid) {
                    var simFrameDelta = data.airStolenSimulationFrame - referenceSimulationFrame;
                    if (simFrameDelta > byte.MaxValue) {
                        simFrameDelta = byte.MaxValue;
                    }

                    SerializeTools.WriteFieldSimFrameDelta(bitStream, (byte)simFrameDelta);
                } else {
                    SerializeTools.WriteFieldSimFrameDelta(bitStream, 0);
                }


                var fieldValue = data.airStolen;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                if (isRefSimFrameValid) {
                    var simFrameDelta = data.remainingTimeSimulationFrame - referenceSimulationFrame;
                    if (simFrameDelta > byte.MaxValue) {
                        simFrameDelta = byte.MaxValue;
                    }

                    SerializeTools.WriteFieldSimFrameDelta(bitStream, (byte)simFrameDelta);
                } else {
                    SerializeTools.WriteFieldSimFrameDelta(bitStream, 0);
                }


                var fieldValue = data.remainingTime;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.inGame;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;

            return mask;
        }

        public static _dbac35785ed561c428f6925098e216fa_3788241317174555150 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(3);
            }

            var val = new _dbac35785ed561c428f6925098e216fa_3788241317174555150();
            if (bitStream.ReadMask())
            {
                val.airStolenSimulationFrame = referenceSimulationFrame + DeserializerTools.ReadFieldSimFrameDelta(bitStream);

                val.airStolen = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _dbac35785ed561c428f6925098e216fa_3788241317174555150.airStolenMask;
            }
            if (bitStream.ReadMask())
            {
                val.remainingTimeSimulationFrame = referenceSimulationFrame + DeserializerTools.ReadFieldSimFrameDelta(bitStream);

                val.remainingTime = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _dbac35785ed561c428f6925098e216fa_3788241317174555150.remainingTimeMask;
            }
            if (bitStream.ReadMask())
            {

                val.inGame = bitStream.ReadBool();
                val.FieldsMask |= _dbac35785ed561c428f6925098e216fa_3788241317174555150.inGameMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_dbac35785ed561c428f6925098e216fa_3788241317174555150(" +
                $" airStolen: { this.airStolen }" +
                $", airStolenSimFrame: { this.airStolenSimulationFrame }" +
                $" remainingTime: { this.remainingTime }" +
                $", remainingTimeSimFrame: { this.remainingTimeSimulationFrame }" +
                $" inGame: { this.inGame }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(3, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(3, '0') })";
        }
    }


}